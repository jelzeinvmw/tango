---
project: TMM Auto
kind: PIPELINE
name: VMworld-CICD-Smart-Template
enabled: true
concurrency: 20
options: [
  GIT_TRIGGER]
input:
  GIT_SERVER_URL: ''
  GIT_BRANCH_NAME: ''
  GIT_COMMIT_ID: ''
  GIT_EVENT_TIMESTAMP: ''
  GIT_EVENT_DESCRIPTION: ''
  GIT_REPO_NAME: ''
  GIT_EVENT_OWNER_NAME: ''
  GIT_CHANGE_SUBJECT: ''
ciWorkspace:
  image: automationbeta/cs-builder:latest
  cache:
  - /root/.m2
  endpoint: Build-Docker-Host
stageOrder:
- Build-Publish
- Development
- Production
stages:
  Build-Publish:
    taskOrder:
    - Unit-Test
    - Build-App
    - Build-Image
    tasks:
      Build-Image:
        type: CI
        ignoreFailure: false
        preCondition: ''
        input:
          process: [
            ]
          steps: [
            cd demo-project,
            COMMIT=`git rev-parse HEAD`,
            'export IMAGE=automationbeta/vmworld_demo:$COMMIT',
            'export DOCKER_HOST=tcp://18.211.211.27:4243',
            docker login --username=automationbeta --password=VMware@123,
            docker build -t $IMAGE --file ./docker/Dockerfile .,
            docker push $IMAGE]
          export: [
            IMAGE]
          artifacts: [
            '']
          
      Unit-Test:
        type: CI
        ignoreFailure: false
        preCondition: ''
        input:
          process: [
            {
              path: /demo-project,
              type: junit,
              label: Junit
            },
            {
              path: /demo-project,
              type: jacoco,
              label: Jacoco
            },
            {
              path: /demo-project,
              type: checkstyle,
              label: Checkstyle
            },
            {
              path: /demo-project,
              type: findbugs,
              label: Findbugs
            }]
          steps: [
            cd demo-project,
            mvn test]
          export: [
            '']
          artifacts: [
            '']
          
      Build-App:
        type: CI
        ignoreFailure: false
        preCondition: ''
        input:
          process: [
            {
              path: /demo-project,
              type: junit,
              label: Junit
            },
            {
              path: /demo-project,
              type: jacoco,
              label: Jacoco
            },
            {
              path: /demo-project,
              type: checkstyle,
              label: Checkstyle
            },
            {
              path: /demo-project,
              type: findbugs,
              label: Findbugs
            }]
          steps: [
            cd demo-project,
            mvn clean install -DskipTests]
          export: [
            '']
          artifacts: [
            '']
          
  Production:
    description: ''
    taskOrder:
    - Get Service Details
    - Prepare Phase 1
    - Deploy Phase 1
    - Verify Phase 1
    - Prepare Phase 2
    - Deploy Phase 2
    - Verify Phase 2
    - Prepare Phase 3
    - Deploy Phase 3
    - Verify Phase 3
    - Finish Deployment
    tasks:
      Get Service Details:
        type: K8S
        ignoreFailure: false
        preCondition: ''
        endpoints:
          kubernetesServer: Prod-VKE-Cluster
        input:
          filePath: ''
          commit: ''
          action: GET
          continueOnConflict: false
          parameters: {
            }
          timeout: '5'
          yaml: |-
            apiVersion: v1
            kind: Service
            metadata:
              name: codestream-demo
              namespace: codestream
      Verify Phase 1:
        type: POLL
        ignoreFailure: true
        preCondition: ''
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json
          }
          exitCriteria: {
            failure: status == 'FAILED' || status == 'UNSTABLE',
            success: status == 'COMPLETED'
          }
          pollCount: 120
          pollIntervalSeconds: 5
          url: http://${Production.Get Service Details.output.response.loadBalancers.codestream-demo.ingress[0].hostname}/health-check.json
      Verify Phase 2:
        type: POLL
        ignoreFailure: true
        preCondition: ''
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json
          }
          exitCriteria: {
            failure: status == 'FAILED' || status == 'UNSTABLE',
            success: status == 'COMPLETED'
          }
          pollCount: 120
          pollIntervalSeconds: 5
          url: http://${Production.Get Service Details.output.response.loadBalancers.codestream-demo.ingress[0].hostname}/health-check.json
      Prepare Phase 3:
        type: K8S
        ignoreFailure: false
        preCondition: ''
        endpoints:
          kubernetesServer: Prod-VKE-Cluster
        input:
          action: APPLY
          yaml: |-
            apiVersion: extensions/v1beta1
            kind: Deployment
            metadata:
              labels:
                app: codestream-demo
              name: codestream-demo
              namespace: codestream
            spec:
              minReadySeconds: 0
              replicas: 10
              template:
                spec:
                  containers:
                  - image: ${Build-Publish.Build-Image.output.exports.IMAGE}
                    name: codestream-demo
                    ports:
                    - containerPort: 80
                      name: codestream-demo
                  imagePullSecrets:
                  - name: dockerhub-secret
                  minReadySeconds: 0
      Finish Deployment:
        type: K8S
        ignoreFailure: false
        preCondition: ''
        endpoints:
          kubernetesServer: Prod-VKE-Cluster
        input:
          filePath: ''
          commit: ''
          action: DELETE
          continueOnConflict: false
          parameters: {
            }
          timeout: '5'
          yaml: |-
            apiVersion: extensions/v1beta1
            kind: Deployment
            metadata:
              labels:
                app: codestream-demo
              name: new-deployment
              namespace: codestream
      Verify Phase 3:
        type: POLL
        ignoreFailure: true
        preCondition: ''
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json
          }
          exitCriteria: {
            failure: status == 'FAILED' || status == 'UNSTABLE',
            success: status == 'COMPLETED'
          }
          pollCount: 120
          pollIntervalSeconds: 5
          url: http://${Production.Get Service Details.output.response.loadBalancers.codestream-demo.ingress[0].hostname}/health-check.json
      Prepare Phase 2:
        type: K8S
        ignoreFailure: false
        preCondition: ''
        endpoints:
          kubernetesServer: Prod-VKE-Cluster
        input:
          action: APPLY
          yaml: |-
            apiVersion: extensions/v1beta1
            kind: Deployment
            metadata:
              labels:
                app: codestream-demo
              name: codestream-demo
              namespace: codestream
            spec:
              minReadySeconds: 0
              replicas: 5
      Prepare Phase 1:
        type: K8S
        ignoreFailure: false
        preCondition: ''
        endpoints:
          kubernetesServer: Prod-VKE-Cluster
        input:
          filePath: ''
          commit: ''
          action: APPLY
          continueOnConflict: false
          parameters: {
            }
          timeout: '5'
          yaml: |-
            apiVersion: extensions/v1beta1
            kind: Deployment
            metadata:
              labels:
                app: codestream-demo
              name: codestream-demo
              namespace: codestream
            spec:
              minReadySeconds: 0
              replicas: 7
      Deploy Phase 2:
        type: K8S
        ignoreFailure: false
        preCondition: ''
        endpoints:
          kubernetesServer: Prod-VKE-Cluster
        input:
          action: APPLY
          yaml: |-
            apiVersion: extensions/v1beta1
            kind: Deployment
            metadata:
              labels:
                app: codestream-demo
              name: new-deployment
              namespace: codestream
            spec:
              minReadySeconds: 0
              replicas: 5
      Deploy Phase 3:
        type: K8S
        ignoreFailure: false
        preCondition: ''
        endpoints:
          kubernetesServer: Prod-VKE-Cluster
        input:
          action: APPLY
          yaml: |-
            apiVersion: extensions/v1beta1
            kind: Deployment
            metadata:
              labels:
                app: codestream-demo
              name: new-deployment
              namespace: codestream
            spec:
              minReadySeconds: 0
              replicas: 0
      Deploy Phase 1:
        type: K8S
        ignoreFailure: false
        preCondition: ''
        endpoints:
          kubernetesServer: Prod-VKE-Cluster
        input:
          filePath: ''
          commit: ''
          action: CREATE
          continueOnConflict: false
          parameters: {
            }
          timeout: '5'
          yaml: |-
            apiVersion: extensions/v1beta1
            kind: Deployment
            metadata:
              labels:
                app: codestream-demo
              name: new-deployment
              namespace: codestream
            spec:
              minReadySeconds: 0
              replicas: 3
              selector:
                matchLabels:
                  app: codestream-demo
                  tier: frontend
              template:
                metadata:
                  labels:
                    app: codestream-demo
                    tier: frontend
                spec:
                  containers:
                  - image: ${Build-Publish.Build-Image.output.exports.IMAGE}
                    name: codestream-demo
                    ports:
                    - containerPort: 80
                      name: codestream-demo
                  imagePullSecrets:
                  - name: dockerhub-secret
                  minReadySeconds: 0
  Development:
    description: ''
    taskOrder:
    - Create Namespace
    - Create Secret
    - Create Service
    - Create Deployment
    - Verify Deployment
    - Delete Namespace
    tasks:
      Create Secret:
        type: K8S
        ignoreFailure: false
        preCondition: ''
        endpoints:
          kubernetesServer: Dev-VKE-Cluster
        input:
          action: CREATE
          yaml: |-
            apiVersion: v1
            data:
              .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsidXNlcm5hbWUiOiJhdXRvbWF0aW9uYmV0YSIsInBhc3N3b3JkIjoiVk13YXJlQDEyMyIsImVtYWlsIjoiYXV0b21hdGlvbmJldGF1c2VyQGdtYWlsLmNvbSIsImF1dGgiOiJZWFYwYjIxaGRHbHZibUpsZEdFNlZrMTNZWEpsUURFeU13PT0ifX19
            kind: Secret
            metadata:
              name: dockerhub-secret
              namespace: codestream-917936
            type: kubernetes.io/dockerconfigjson
      Create Namespace:
        type: K8S
        ignoreFailure: false
        preCondition: ''
        endpoints:
          kubernetesServer: Dev-VKE-Cluster
        input:
          action: CREATE
          yaml: |-
            apiVersion: v1
            kind: Namespace
            metadata:
              name: codestream-917936
              namespace: codestream-917936
      Verify Deployment:
        type: POLL
        ignoreFailure: true
        preCondition: ''
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json
          }
          exitCriteria: {
            failure: status == 'FAILED' || status == 'UNSTABLE',
            success: status == 'COMPLETED'
          }
          pollCount: 120
          pollIntervalSeconds: 5
          url: http://${Development.Create Service.output.response.loadBalancers.codestream-demo.ingress[0].hostname}/health-check.json
      Create Deployment:
        type: K8S
        ignoreFailure: false
        preCondition: ''
        endpoints:
          kubernetesServer: Dev-VKE-Cluster
        input:
          action: CREATE
          yaml: |-
            apiVersion: extensions/v1beta1
            kind: Deployment
            metadata:
              labels:
                app: codestream-demo
              name: codestream-demo
              namespace: codestream-917936
            spec:
              minReadySeconds: 0
              replicas: 10
              selector:
                matchLabels:
                  app: codestream-demo
                  tier: frontend
              template:
                metadata:
                  labels:
                    app: codestream-demo
                    tier: frontend
                spec:
                  containers:
                  - image: ${Build-Publish.Build-Image.output.exports.IMAGE}
                    name: codestream-demo
                    ports:
                    - containerPort: 80
                      name: codestream-demo
                  imagePullSecrets:
                  - name: dockerhub-secret
                  minReadySeconds: 0
      Delete Namespace:
        type: K8S
        ignoreFailure: false
        preCondition: ''
        endpoints:
          kubernetesServer: Dev-VKE-Cluster
        input:
          action: DELETE
          yaml: |-
            apiVersion: v1
            kind: Namespace
            metadata:
              name: codestream-917936
              namespace: codestream-917936
      Create Service:
        type: K8S
        ignoreFailure: false
        preCondition: ''
        endpoints:
          kubernetesServer: Dev-VKE-Cluster
        input:
          action: CREATE
          yaml: |-
            apiVersion: v1
            kind: Service
            metadata:
              labels:
                app: codestream-demo
              name: codestream-demo
              namespace: codestream-917936
            spec:
              minReadySeconds: 0
              ports:
              - port: 80
              selector:
                app: codestream-demo
                tier: frontend
              type: LoadBalancer
